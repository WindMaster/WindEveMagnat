###########################################
# all regions
# SET CONCAT_NULL_YIELDS_NULL off
# SELECT 'insert into eve_map_regions (region_id, region_name) values ('
#+convert(varchar(99), regionID)
#+', '''+replace([regionName] collate database_default, '''', '''''')+''''
#+');' from eve.dbo.mapRegions
###########################################
#drop table eve_map_regions;
create table eve_map_regions (
  region_id   int          not null
, region_name varchar(100) default null
, primary key  (region_id)
, key i_region_name (region_name)
);



###########################################
# all solarsystems
# SET CONCAT_NULL_YIELDS_NULL off
# SELECT 'insert into eve_map_solarsystems (solarsystem_id, region_id, solarsystem_name, security) values ('
#+convert(varchar(99), solarSystemID)
#+', '''+convert(varchar(99), regionID)+''''
#+', '''+convert(varchar(99), solarSystemName)+''''
#+', '''+convert(varchar(99), security)+''''
#+');' from eve.dbo.mapSolarSystems
###########################################
#drop table eve_map_solarsystems;
create table eve_map_solarsystems (
  solarsystem_id   int          not null
, region_id        int          default null comment 'eve_map_regions.region_id'
, region_name      varchar(100) not null default '' comment 'eve_map_regions.region_name cached'
, solarsystem_name varchar(100) default null
, security         double       default null comment '-1 to 1'
, primary key     (solarsystem_id)
, key i_region_id (region_id)
, key i_solarsystem_name (solarsystem_name)
, key i_security  (security)
, key i_1         (region_id, security)
);




###########################################
# all the gates
# SET CONCAT_NULL_YIELDS_NULL off
# SELECT 'insert into eve_map_solarsystem_jumps (from_solarsystem_id, to_solarsystem_id, from_region_id, to_region_id) values ('
#+convert(varchar(99), fromSolarSystemID)
#+', '+convert(varchar(99), toSolarSystemID)
#+', '+convert(varchar(99), fromRegionID)
#+', '+convert(varchar(99), toRegionID)
#+');' from eve.dbo.mapSolarSystemJumps
###########################################
#drop table eve_map_solarsystem_jumps;
create table eve_map_solarsystem_jumps (
  from_solarsystem_id   int     not null comment 'eve_map_solarsystems.solarsystem_id'
, to_solarsystem_id     int     not null comment 'eve_map_solarsystems.solarsystem_id'
, from_region_id        int     not null comment 'eve_map_regions.region_id'
, to_region_id          int     not null comment 'eve_map_regions.region_id'
, primary key            (from_solarsystem_id, to_solarsystem_id)
, key i_from_solarsystem (from_solarsystem_id)
, key i_to_solarsystem   (to_solarsystem_id)
);







###########################################
# all the stations
# SET CONCAT_NULL_YIELDS_NULL off
# SELECT 'insert into eve_sta_stations (station_id, solarsystem_id, region_id, corporation_id, station_name) values ('
#+convert(varchar(99), stationID)
#+', '''+convert(varchar(99), solarSystemID)+''''
#+', '''+convert(varchar(99), regionID)+''''
#+', '''+convert(varchar(99), corporationID)+''''
#+', '''+convert(varchar(99), stationName)+''''
#+');' from eve.dbo.staStations
###########################################
#drop table eve_sta_stations;
create table eve_sta_stations (
  station_id            int           not null default 0  comment 'unique'
, solarsystem_id        int           not null default 0  comment 'eve_map_solarsystems.solarsystem_id'
, solarsystem_name      varchar(255)  not null default '' comment 'cached value from eve_map_solarsystems.solarsystem_name'
, region_id             int           not null default 0  comment 'eve_map_regions.region_id'
, region_name           varchar(255)  not null default '' comment 'HTTP_EVE_REGIONNAME'
, station_type_id       int           not null default 0  comment 'eve_inv_types.type_id for conquerable, otherwise 0'
, station_name          varchar(100)  not null default '' comment 'the station name'
, corporation_id        int           not null default 0  comment 'NPC stations tie to eve_names.item_id'
, corporation_name      varchar(255)  not null default 'Unknown' comment 'supplied by API for conquerable'
, created               timestamp     not null default now() comment 'date inserted'
, updated               datetime      not null default 0 comment 'date last updated'
, primary key          (station_id)
, key i_solarsystem_id (solarsystem_id)
, key i_region_id      (region_id)
);








###########################################
# all the items
# SET CONCAT_NULL_YIELDS_NULL off
# SELECT 'insert into eve_inv_types (type_id, group_id, marketgroup_id, name, description, graphic_id, volume, portion_size, race_id, published) values ('
#+convert(varchar(99), typeID)
#+', '+convert(varchar(99), groupID)
#+', '''+convert(varchar(99), marketGroupID)+''''
#+', '''+replace([typeName] collate database_default, '''', '''''')+''''
#+', '''+replace([description] collate database_default, '''', '''''')+''''
#+', '''+convert(varchar(99), graphicID)+''''
#+', '''+convert(varchar(99), volume)+''''
#+', '''+convert(varchar(99), portionSize)+''''
#+', '''+convert(varchar(99), raceID)+''''
#+', '''+convert(varchar(99), published)+''''
#+');' from eve.dbo.invTypes
###########################################
#drop table eve_inv_types;
create table eve_inv_types (
  type_id          int           not null
, group_id         int                    default null
, marketgroup_id   int                    default null comment 'null = not for sale'
, name             varchar(100)           default null
, description      varchar(3000)          default null
, group_name       varchar(100)  not null default ''   comment 'cached value from eve_inv_groups.group_name'
, marketgroup_name varchar(100)  not null default ''   comment 'cached value from eve_inv_groups.marketgroup_name'
, full_market_name varchar(100)  not null default ''   comment 'cached value from eve_inv_groups.marketgroup_name, propagated up to the parents'
, parent_id_1      int           not null default 0    comment 'eve_inv_marketgroups.id of the top level parent, ie Ammunition'
, parent_id_2      int           not null default 0    comment 'eve_inv_marketgroups.id of the 2nd level parent, ie Hybrid Charges'
, parent_id_3      int           not null default 0    comment 'eve_inv_marketgroups.id of the 3rd level parent, ie Standard Charges'
, parent_id_4      int           not null default 0    comment 'eve_inv_marketgroups.id of the 4th level parent, ie Medium'
, parent_id_5      int           not null default 0    comment 'eve_inv_marketgroups.id of the 5th level parent, if any'
, parent_id_6      int           not null default 0    comment 'eve_inv_marketgroups.id of the 6th level parent, if any'
, parent_id_7      int           not null default 0    comment 'eve_inv_marketgroups.id of the 7th level parent, if any'
, parent_id_8      int           not null default 0    comment 'eve_inv_marketgroups.id of the 8th level parent, if any'
, parent_name_1    varchar(100)  not null default ''   comment 'eve_inv_marketgroups.id of the top level parent, ie Ammunition'
, parent_name_2    varchar(100)  not null default ''   comment 'eve_inv_marketgroups.id of the 2nd level parent, ie Hybrid Charges'
, parent_name_3    varchar(100)  not null default ''   comment 'eve_inv_marketgroups.id of the 3rd level parent, ie Standard Charges'
, parent_name_4    varchar(100)  not null default ''   comment 'eve_inv_marketgroups.id of the 4th level parent, ie Medium'
, parent_name_5    varchar(100)  not null default ''   comment 'eve_inv_marketgroups.id of the 5th level parent, if any'
, parent_name_6    varchar(100)  not null default ''   comment 'eve_inv_marketgroups.id of the 6th level parent, if any'
, parent_name_7    varchar(100)  not null default ''   comment 'eve_inv_marketgroups.id of the 7th level parent, if any'
, parent_name_8    varchar(100)  not null default ''   comment 'eve_inv_marketgroups.id of the 8th level parent, if any'
, graphic_id       int                    default null comment 'ties to eveGraphics.id, but we normalize it out'
, icon_name        varchar(100)  not null default ''   comment 'this needs to be looked up in eveGraphics when importing'
, volume           double                 default null
, portion_size     int                    default null
, race_id          int                    default null
, published        tinyint(1)             default null comment '0 = not published, 1 = published'
, jita_price_sell  double                 default null comment 'avg price to buy 5% of the market in Jita only'
, jita_price_buy   double                 default null comment 'avg price to buy 5% of the market in Jita only'
, jita_date        datetime               default null comment 'date jita_* was last updated'
, 5pct_price_sell  double                 default null comment 'avg sell price for 5% of the market'
, 5pct_price_buy   double                 default null comment 'avg buy price for 5% of the market'
, 5pct_date        datetime               default null comment 'date 5pct_* was last updated'
, primary key         (type_id)
, key i_group_id      (group_id)
, key i_marketgroupid (marketgroup_id)
, key i_name          (name)
);







###########################################
# all market groups
# SET CONCAT_NULL_YIELDS_NULL off
# SELECT 'insert into eve_inv_marketgroups (marketgroup_id, parentgroup_id, marketgroup_name, description, graphic_id, has_types) values ('
#+convert(varchar(99), marketGroupID)
#+', '''+convert(varchar(99), parentGroupID)+''''
#+', '''+replace([marketGroupName] collate database_default, '''', '''''')+''''
#+', '''+replace([description] collate database_default, '''', '''''')+''''
#+', '''+convert(varchar(99), iconID)+''''
#+', '''+convert(varchar(99), hasTypes)+''''
#+');' from eve.dbo.invMarketGroups
###########################################
#drop table eve_inv_marketgroups;
create table eve_inv_marketgroups (
  marketgroup_id   int           not null
, parentgroup_id   int           default null comment 'eve_inv_marketgroups.marketgroup_id'
, marketgroup_name varchar(100)  default null
, description      varchar(3000) default null
, graphic_id       int           default null comment 'ties to eveGraphics.id, but we normalize it out'
, icon_name        varchar(100)  default null comment 'this needs to be looked up in eveGraphics when importing'
, has_types        int           default null comment '1 = has types under it'
, primary key          (marketgroup_id)
, key i_parentgroup_id (parentgroup_id)
);







###########################################
# all inventory groups
# SET CONCAT_NULL_YIELDS_NULL off
# SELECT 'insert into eve_inv_groups (group_id, category_id, group_name, description, icon_id, published) values ('
#+convert(varchar(99), groupID)
#+', '+convert(varchar(99), categoryID)
#+', '''+replace([groupName] collate database_default, '''', '''''')+''''
#+', '''+replace([description] collate database_default, '''', '''''')+''''
#+', '''+convert(varchar(99), iconID)+'''
#+', '+convert(varchar(99), published)
#+');' from eve.dbo.invGroups
###########################################
#drop table eve_inv_groups;
create table eve_inv_groups (
  group_id         int           not null
, category_id      int           default null comment 'eve_inv_categories.category_id'
, group_name       varchar(100)  default null
, description      varchar(3000) default null
, icon_id          int           default null comment 'ties to eveGraphics.id, but we normalize it out'
, icon_name        varchar(100)  default null comment 'this needs to be looked up in eveGraphics when importing'
, published        tinyint(1)    default null comment '0 = not published, 1 = published'
, primary key       (group_id)
, key i_category_id (category_id)
);







###########################################
# names of all the objects
# SET CONCAT_NULL_YIELDS_NULL off
# SELECT 'insert into eve_names (item_id, item_name, category_id, group_id, type_id) values ('
#+convert(varchar(99), itemID)
#+', '''+replace([itemName] collate database_default, '''', '''''')+''''
#+', '''+convert(varchar(99), categoryID)+''''
#+', '''+convert(varchar(99), groupID)+''''
#+', '''+convert(varchar(99), typeID)+''''
#+');' from eve.dbo.eveNames
###########################################
#drop table eve_names;
create table eve_names (
  item_id     int          not null
, item_name   varchar(100) default null
, category_id int          unsigned default null
, group_id    int          default null
, type_id     int          default null comment 'eve_inv_types.type_id'
, primary key     (item_id)
, key category_id (category_id)
, key group_id    (group_id)
, key type_id     (type_id)
);










###########################################
# The raw uploads that need to be processed
# they're written here before anywhere else, and deleted as soon as they're processed
###########################################
#drop table uploads_pending;
create table uploads_pending (
  id             bigint auto_increment primary key
, upload_type    varchar(16)  not null default '' comment 'orders, history - the type of upload'
, region_id      int          not null default 0  comment 'eve_map_regions.region_id'
, type_id        int          not null default 0  comment 'eve_inv_types.type_id'
, log            text                             comment 'the raw log to parse'
, upload_key     varchar(32)  not null default '' comment 'the client upload token'
, developer_key  varchar(32)  not null default '' comment 'the client developer key'
, version        varchar(10)  not null default '' comment 'the client version'
, hash           varchar(255) not null default '' comment 'hash for the uploaded data'
, generated_at   varchar(32)  not null default '' comment 'date the log was generated, supplied by the client'
, created        timestamp    not null default now() comment 'date of the last pageload'
, ip_remote      varchar(16)  not null default '' comment 'the IP address that did the update $_SERVER["REMOTE_ADDR"]'
, ip_forwarded   varchar(16)  not null default '' comment 'the IP address that did the update $_SERVER["X_HTTP_X_FORWARDED_FOR"]'
, ip_host        varchar(255) not null default '' comment 'the gethostbyaddr() result from the IP that did the update'
);






###########################################
# The log of raw data uploaded from the client, clear this out every once in a while, it's really only used for debugging or recover from an error
###########################################
#drop table log_uploads;
create table log_uploads (
  id             bigint auto_increment primary key
, upload_type    varchar(16)  not null default '' comment 'orders, history - the type of upload'
, region_id      int          not null default 0  comment 'eve_map_regions.region_id'
, type_id        int          not null default 0  comment 'eve_inv_types.type_id'
, log            text                             comment 'the raw log to parse'
, upload_key     varchar(32)  not null default '' comment 'the client upload token'
, developer_key  varchar(32)  not null default '' comment 'the client developer key'
, version        varchar(10)  not null default '' comment 'the client version'
, hash           varchar(255) not null default '' comment 'hash for the uploaded data'
, generated_at   varchar(32)  not null default '' comment 'date the log was generated, supplied by the client, in EVE time'
, created        timestamp    not null default now() comment 'date of the last pageload'
, ip_remote      varchar(16)  not null default '' comment 'the IP address that did the update $_SERVER["REMOTE_ADDR"]'
, ip_forwarded   varchar(16)  not null default '' comment 'the IP address that did the update $_SERVER["X_HTTP_X_FORWARDED_FOR"]'
, ip_host        varchar(255) not null default '' comment 'the gethostbyaddr() result from the IP that did the update'
);










###########################################
# we need to keep track of when each item was last updated per region, so that we can instruct the browser on what needs to be updated
###########################################
# for orders
#drop table region_type_updates;
create table region_type_updates (
  region_id      int          not null           comment 'eve_map_regions.region_id'
, type_id        int          not null           comment 'eve_inv_types.type_id'
, updated        timestamp not null default now() comment 'date of the last pageload'
, primary key     (region_id, type_id)
);
# for price history
#drop table region_type_hist_updates;
create table region_type_hist_updates (
  region_id      int          not null           comment 'eve_map_regions.region_id'
, type_id        int          not null           comment 'eve_inv_types.type_id'
, updated        timestamp not null default now() comment 'date of the last pageload'
, primary key     (region_id, type_id)
);











###########################################
# price history for every item
# comes from the uploader
# this table gets *huge*, currently at 62 million rows, max for 2 years data is 6700*58*365*2 = 283,678,000.
###########################################
#drop table items_history;
create table items_history (
  region_id      int          not null           comment 'eve_map_regions.region_id'
, date           date         not null           comment 'date for the entry'
, type_id        int          not null           comment 'eve_inv_types.type_id'
, price_low      double       not null default 0 comment 'low price'
, price_high     double       not null default 0 comment 'high price'
, price_average  double       not null default 0 comment 'average price'
, quantity       bigint       not null default 0 comment 'quantity moved'
, num_orders     bigint       not null default 0 comment 'number of orders'
, created        datetime     not null           comment 'date we received the first data'
, primary key    (region_id, type_id, date)
, key i_main           (type_id, region_id, date)
, key i_type_id        (type_id)
, key i_region_id      (region_id)
, key i_date           (date)
)
partition by range(region_id) ( # note that these are off by one because it's only less than, not less than or equal to
  partition p10000001 values less than (10000002) # Derelik
, partition p10000002 values less than (10000003) # The Forge
, partition p10000003 values less than (10000005) # Vale of the Silent
, partition p10000005 values less than (10000006) # Detorid
, partition p10000006 values less than (10000007) # Wicked Creek
, partition p10000007 values less than (10000008) # Cache
, partition p10000008 values less than (10000009) # Scalding Pass
, partition p10000009 values less than (10000010) # Insmother
, partition p10000010 values less than (10000011) # Tribute
, partition p10000011 values less than (10000012) # Great Wildlands
, partition p10000012 values less than (10000013) # Curse
, partition p10000013 values less than (10000014) # Malpais
, partition p10000014 values less than (10000015) # Catch
, partition p10000015 values less than (10000016) # Venal
, partition p10000016 values less than (10000018) # Lonetrek
, partition p10000018 values less than (10000020) # The Spire
, partition p10000020 values less than (10000021) # Tash-Murkon
, partition p10000021 values less than (10000022) # Outer Passage
, partition p10000022 values less than (10000023) # Stain
, partition p10000023 values less than (10000025) # Pure Blind
, partition p10000025 values less than (10000027) # Immensea
, partition p10000027 values less than (10000028) # Etherium Reach
, partition p10000028 values less than (10000029) # Molden Heath
, partition p10000029 values less than (10000030) # Geminate
, partition p10000030 values less than (10000031) # Heimatar
, partition p10000031 values less than (10000032) # Impass
, partition p10000032 values less than (10000033) # Sinq Laison
, partition p10000033 values less than (10000034) # The Citadel
, partition p10000034 values less than (10000035) # The Kalevala Expanse
, partition p10000035 values less than (10000036) # Deklein
, partition p10000036 values less than (10000037) # Devoid
, partition p10000037 values less than (10000038) # Everyshore
, partition p10000038 values less than (10000039) # The Bleak Lands
, partition p10000039 values less than (10000040) # Esoteria
, partition p10000040 values less than (10000041) # Oasa
, partition p10000041 values less than (10000042) # Syndicate
, partition p10000042 values less than (10000043) # Metropolis
, partition p10000043 values less than (10000044) # Domain
, partition p10000044 values less than (10000045) # Solitude
, partition p10000045 values less than (10000046) # Tenal
, partition p10000046 values less than (10000047) # Fade
, partition p10000047 values less than (10000048) # Providence
, partition p10000048 values less than (10000049) # Placid
, partition p10000049 values less than (10000050) # Khanid
, partition p10000050 values less than (10000051) # Querious
, partition p10000051 values less than (10000052) # Cloud Ring
, partition p10000052 values less than (10000053) # Kador
, partition p10000053 values less than (10000054) # Cobalt Edge
, partition p10000054 values less than (10000055) # Aridia
, partition p10000055 values less than (10000056) # Branch
, partition p10000056 values less than (10000057) # Feythabolis
, partition p10000057 values less than (10000058) # Outer Ring
, partition p10000058 values less than (10000059) # Fountain
, partition p10000059 values less than (10000060) # Paragon Soul
, partition p10000060 values less than (10000061) # Delve
, partition p10000061 values less than (10000062) # Tenerifis
, partition p10000062 values less than (10000063) # Omist
, partition p10000063 values less than (10000064) # Period Basis
, partition p10000064 values less than (10000065) # Essence
, partition p10000065 values less than (10000066) # Kor-Azor
, partition p10000066 values less than (10000067) # Perrigen Falls
, partition p10000067 values less than (10000068) # Genesis
, partition p10000068 values less than (10000069) # Verge Vendor
, partition p10000069 values less than (10000070) # Black Rise
, partition pother values less than maxvalue # everything else (shouldn't be any)
);
# only cache the last 30 days of history.  This is used to do regional calculations for the most recent data
# data gets erased nightly
#drop table items_history_30;
create table items_history_30 (
  region_id      int          not null            comment 'eve_map_regions.region_id'
, date           date         not null            comment 'date for the entry'
, type_id        int          not null            comment 'eve_inv_types.type_id'
, price_low      double       not null default 0  comment 'low price'
, price_high     double       not null default 0  comment 'high price'
, price_average  double       not null default 0  comment 'average price'
, quantity       bigint       not null default 0  comment 'quantity moved'
, num_orders     bigint       not null default 0  comment 'number of orders'
, created        datetime     not null            comment 'date we received the first data'
, primary key    (region_id, type_id, date)
, key i_main           (type_id, region_id, date)
, key i_main2          (marketgroup_id, region_id, date)
, key i_type_id        (type_id)
, key i_marketgroup_id (marketgroup_id)
, key i_region_id      (region_id)
, key i_date           (date)
)
partition by range(region_id) ( # note that these are off by one because it's only less than, not less than or equal to
  partition p10000001 values less than (10000002) # Derelik
, partition p10000002 values less than (10000003) # The Forge
, partition p10000003 values less than (10000005) # Vale of the Silent
, partition p10000005 values less than (10000006) # Detorid
, partition p10000006 values less than (10000007) # Wicked Creek
, partition p10000007 values less than (10000008) # Cache
, partition p10000008 values less than (10000009) # Scalding Pass
, partition p10000009 values less than (10000010) # Insmother
, partition p10000010 values less than (10000011) # Tribute
, partition p10000011 values less than (10000012) # Great Wildlands
, partition p10000012 values less than (10000013) # Curse
, partition p10000013 values less than (10000014) # Malpais
, partition p10000014 values less than (10000015) # Catch
, partition p10000015 values less than (10000016) # Venal
, partition p10000016 values less than (10000018) # Lonetrek
, partition p10000018 values less than (10000020) # The Spire
, partition p10000020 values less than (10000021) # Tash-Murkon
, partition p10000021 values less than (10000022) # Outer Passage
, partition p10000022 values less than (10000023) # Stain
, partition p10000023 values less than (10000025) # Pure Blind
, partition p10000025 values less than (10000027) # Immensea
, partition p10000027 values less than (10000028) # Etherium Reach
, partition p10000028 values less than (10000029) # Molden Heath
, partition p10000029 values less than (10000030) # Geminate
, partition p10000030 values less than (10000031) # Heimatar
, partition p10000031 values less than (10000032) # Impass
, partition p10000032 values less than (10000033) # Sinq Laison
, partition p10000033 values less than (10000034) # The Citadel
, partition p10000034 values less than (10000035) # The Kalevala Expanse
, partition p10000035 values less than (10000036) # Deklein
, partition p10000036 values less than (10000037) # Devoid
, partition p10000037 values less than (10000038) # Everyshore
, partition p10000038 values less than (10000039) # The Bleak Lands
, partition p10000039 values less than (10000040) # Esoteria
, partition p10000040 values less than (10000041) # Oasa
, partition p10000041 values less than (10000042) # Syndicate
, partition p10000042 values less than (10000043) # Metropolis
, partition p10000043 values less than (10000044) # Domain
, partition p10000044 values less than (10000045) # Solitude
, partition p10000045 values less than (10000046) # Tenal
, partition p10000046 values less than (10000047) # Fade
, partition p10000047 values less than (10000048) # Providence
, partition p10000048 values less than (10000049) # Placid
, partition p10000049 values less than (10000050) # Khanid
, partition p10000050 values less than (10000051) # Querious
, partition p10000051 values less than (10000052) # Cloud Ring
, partition p10000052 values less than (10000053) # Kador
, partition p10000053 values less than (10000054) # Cobalt Edge
, partition p10000054 values less than (10000055) # Aridia
, partition p10000055 values less than (10000056) # Branch
, partition p10000056 values less than (10000057) # Feythabolis
, partition p10000057 values less than (10000058) # Outer Ring
, partition p10000058 values less than (10000059) # Fountain
, partition p10000059 values less than (10000060) # Paragon Soul
, partition p10000060 values less than (10000061) # Delve
, partition p10000061 values less than (10000062) # Tenerifis
, partition p10000062 values less than (10000063) # Omist
, partition p10000063 values less than (10000064) # Period Basis
, partition p10000064 values less than (10000065) # Essence
, partition p10000065 values less than (10000066) # Kor-Azor
, partition p10000066 values less than (10000067) # Perrigen Falls
, partition p10000067 values less than (10000068) # Genesis
, partition p10000068 values less than (10000069) # Verge Vendor
, partition p10000069 values less than (10000070) # Black Rise
, partition pother values less than maxvalue # everything else (shouldn't be any)
);










###########################################
# all of the items currently being bought on the market
###########################################
#drop table items_buying;
create table items_buying (
  order_id       bigint       not null           comment 'eve pseudounique id (recycled?)'
, type_id        int          not null           comment 'eve_inv_types.type_id'
, marketgroup_id int          not null           comment 'CACHED eve_inv_types.marketgroup_id'
, group_code     char(1)      not null default '' comment 'CACHED eve_inv_types.group_code'
, station_id     int          not null           comment 'eve_map_stations.station_id'
, solarsystem_id int          not null           comment 'eve_map_solarsystems.solarsystem_id'
, region_id      int          not null           comment 'eve_map_regions.region_id'
, price          double       not null           comment 'amount'
, range2         integer      not null default 0 comment 'not used, but it''s here so it''s in sync with items_buying'
, duration       integer      not null           comment 'in days, used to calculate date_expires'
, qty_total      double       not null           comment 'total unit to buy'
, qty_avail      double       not null           comment 'currently available unit count'
, qty_min        double       not null           comment 'the minimum volume required to buy'
, date_issued    datetime     not null           comment 'last modification time'
, date_expires   datetime     not null           comment 'time the order will expire if not filled'
, date_created   datetime     not null           comment 'date the data is from - utc'
, primary key (region_id, order_id)
);


###########################################
# all of the items currently being sold on the market
###########################################
#drop table items_selling;
create table items_selling (
  order_id       bigint       not null           comment 'eve pseudounique id (recycled?)'
, type_id        int          not null           comment 'eve_inv_types.type_id'
, marketgroup_id int          not null           comment 'CACHED eve_inv_types.marketgroup_id'
, group_code     char(1)      not null default '' comment 'CACHED eve_inv_types.group_code'
, station_id     int          not null           comment 'eve_map_stations.station_id'
, solarsystem_id int          not null           comment 'eve_map_solarsystems.solarsystem_id'
, region_id      int          not null           comment 'eve_map_regions.region_id'
, price          double       not null           comment 'amount'
, range2         integer      not null default 0 comment 'not used, but it''s here so it''s in sync with items_buying'
, duration       integer      not null           comment 'in days, used to calculate date_expires'
, qty_total      double       not null           comment 'total unit to buy'
, qty_avail      double       not null           comment 'currently available unit count'
, qty_min        double       not null           comment 'the minimum volume required to buy'
, date_issued    datetime     not null           comment 'last modification time'
, date_expires   datetime     not null           comment 'time the order will expire if not filled'
, date_created   datetime     not null           comment 'date the data is from - utc'
, primary key (region_id, order_id)
);






###########################################
# distance calculations between systems
# this is a pre-calculation of the shortest routes between systems.
# there's no point to calculating on the fly, so just do the expensive calculation once, then look it up
###########################################
#drop table map_jumps;
create table map_jumps (
  from_solarsystem_id    int      not null comment 'eve_map_solarsystems.solarsystem_id'
, to_solarsystem_id      int      not null comment 'eve_map_solarsystems.solarsystem_id'
, num_jumps_short        tinyint  not null default -2 comment '0=same system, -1=impossible, -2=not calculated yet'
, num_jumps_highsec      tinyint  not null default -2
, num_jumps_lowsec       tinyint  not null default -2
, primary key (from_system_id, to_system_id)
);








###########################################
# keep a history of the station's rank within the region
# similar to /reports.php?step=Station2&region_id=10000054 but with a history
###########################################
#drop table station_rank;
create table station_rank (
  station_id       int               not null       comment 'eve_map_stations.station_id'
, date             date              not null       comment 'date the data is for (set when this runs at downtime)'
, rank_orders      smallint unsigned not null       comment 'the rank in the region by number of sell orders'
, rank_price       smallint unsigned not null       comment 'the rank in the region by total sell price'
, count_sell       int unsigned      not null       comment 'the number of sell orders'
, count_buy        int unsigned      not null       comment 'the number of buy orders'
, price_total_sell decimal(32,2)     not null       comment 'total amount of all sell orders'
, price_total_buy  decimal(32,2)     not null       comment 'total amount of all buy orders'
, price_avg_sell   decimal(16,2)     not null       comment 'average price/order for sell orders'
, price_avg_buy    decimal(16,2)     not null       comment 'average price/order for buy orders'
, primary key (station_id, date)
);
